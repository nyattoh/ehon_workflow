name: Storybook -> Pages
on:
  push:
    paths:
      - 'stories/**/*.txt'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

env:
  PYTHONUNBUFFERED: '1'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages (required by Pages actions)
        uses: actions/configure-pages@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          pip install --upgrade pip
          pip install google-generativeai

      - name: Generate Marp Markdown via Gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Create directories with verbose output
          mkdir -p slides dist
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          
          # Find story file
          FILE=$(git diff --name-only HEAD~1 2>/dev/null | grep '^stories/.*\.txt' | head -n1 || true)
          if [ -z "$FILE" ] || [ ! -f "$FILE" ]; then
            echo "No changed story files found, looking for any story file..."
            FILE=$(git ls-files 'stories/*.txt' | head -n1 || true)
          fi
          
          if [ -z "$FILE" ] || [ ! -f "$FILE" ]; then
            echo "Error: No story files found in stories/ directory"
            echo "Creating a sample story file..."
            mkdir -p stories
            echo -e "題名: サンプルストーリー\n\nこれはテスト用のサンプルストーリーです。\nこのファイルは自動生成されました。" > stories/sample.txt
            FILE="stories/sample.txt"
          fi
          
          echo "Using story file: $FILE"
          ls -la "$(dirname "$FILE")"
          
          # Generate markdown with Gemini API
          python scripts/generate_story.py --input "$FILE" --out "slides/story.md"
          
          # Verify the generated markdown file
          if [ -f "slides/story.md" ]; then
            echo "Markdown file generated successfully:"
            head -10 "slides/story.md"
          else
            echo "Error: Markdown file not generated"
            exit 1
          fi
          
          # Verify output
          echo "Generated files in slides/:"
          ls -la slides/ || echo "No files in slides/ directory"
          if [ -f "slides/story.md" ]; then
            echo "First 10 lines of generated markdown:"
            head -n 10 "slides/story.md"
          else
            echo "Error: Failed to generate story.md"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Marp CLI
        run: npm i -g @marp-team/marp-cli

      - name: Build HTML
        run: |
          # Check if markdown file exists
          if [ ! -f "slides/story.md" ]; then
            echo "Error: slides/story.md not found"
            ls -la slides/
            exit 1
          fi
          
          # Convert markdown to HTML
          marp slides/story.md --html --output dist/index.html
          
          # Verify HTML generation
          if [ -f "dist/index.html" ]; then
            echo "HTML file generated successfully:"
            ls -la dist/index.html
            echo "First 5 lines of HTML:"
            head -n 5 dist/index.html
          else
            echo "Error: HTML file not generated"
            exit 1
          fi

      - name: Copy images (if any)
        run: |
          if [ -d slides/images ]; then
            mkdir -p dist/images
            cp -r slides/images/* dist/images/
            echo "Copied images from slides/images/ to dist/images/"
            echo "Image files found:"
            ls -la dist/images/
            echo "File types:"
            file dist/images/* 2>/dev/null || echo "No files to check"
          else
            echo "No images directory found in slides/"
          fi

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
